<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.scr = 0;//score
global.tscr = 0;//total score (gold)
global.maxhp = 30;//max hit points
global.hotlimit = 550;//shot time limit
global.maxheat = 600;//shot time
global.newrec = 0//new record

ht = 0;//cancel alarm

maior = 0; meio =0; menor = 0;


coward = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///nop
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_player) {
    if (obj_player.hot &gt; global.hotlimit) &amp;&amp; (ht != 1) {
        ht = 1; 
        alarm[0] = 120;
    }
}


if (alarm[0] == 0) alarm[0] = 100;

if (room != rm_infinity) visible = false;
if (room = rm_infinity) visible = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///score 
if (room != rm_infinity) {
    global.scr = 0; 
    exit;
}
    

    
if (!instance_exists(obj_player)) &amp;&amp; (keyboard_check_pressed(vk_escape)) {
    global.tscr += global.scr;
    global.scr = 0;
    global.newrec = 0;
   
}
 if room = rm_infinity coward=false;
if (instance_exists(obj_player)) &amp;&amp; (keyboard_check_pressed(vk_escape) &amp;&amp; room=rm_infinity) {
    coward=true;
} 
    

    if (global.scr &gt; global.rec &amp;&amp; coward==false &amp;&amp; !instance_exists(obj_player)) {
    global.newrec = 1;
    global.rec = global.scr;
    }
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw
/*       // global.puptp; N1
        //global.pupdmg; N2
        //global.pupspd; N3
        //maior
        if(global.puptp &gt; maior){
            maior = global.puptp;
        }

        if(global.pupdmg &gt; maior){
            maior = global.pupdmg;
        }

        if(global.pupspd &gt; maior){
            maior = global.pupspd;
        }

        //menor
        if(global.puptp &lt; global.pupdmg &amp;&amp; global.puptp &lt; global.pupspd){
            menor = global.puptp;
        }

        if (global.pupdmg &lt; global.pupspd &amp;&amp; global.pupdmg &lt; global.puptp) {
            menor = global.pupdmg;
        }

        if(global.pupspd &lt; global.pupdmg &amp;&amp; global.pupspd &lt; global.puptp){
            menor = global.pupspd;
        }

        //meio
        if(global.puptp &lt; maior &amp;&amp; global.puptp &gt; menor){
            meio = global.puptp;
        }

        if(global.pupdmg &lt; maior &amp;&amp; global.pupdmg &gt; menor){
            meio = global.pupdmg;
        }

        if(global.pupspd &lt; maior &amp;&amp; global.pupspd &gt; menor){
            meio = global.pupspd;
        }

        //menor repetido
        if(global.puptp == global.pupdmg &amp;&amp; global.puptp &lt; global.pupspd){
            maior = global.pupspd;
            meio = global.puptp;
            menor = global.pupdmg;
        }

        else if(global.puptp == global.pupspd &amp;&amp; global.puptp &lt; global.pupdmg){
            maior = global.pupdmg;
            meio = global.puptp;
            menor = global.pupspd;
        }


        else if(global.pupspd == global.pupdmg &amp;&amp; global.pupspd &lt; global.puptp){
            maior = global.puptp;
            meio = global.pupdmg;
            menor = global.pupspd;
        }

        //maior repetido
        if(global.puptp == global.pupdmg &amp;&amp; global.puptp &gt; global.pupspd){
            maior = global.pupdmg;
            meio = global.puptp;
            menor = global.pupspd;
        }

        else if(global.puptp == global.pupspd &amp;&amp; global.puptp &gt; global.pupdmg){
            maior = global.pupspd;
            meio = global.puptp;
            menor = global.pupdmg;
        }

        else if(global.pupspd == global.pupdmg &amp;&amp; global.pupspd &gt; global.puptp){
            maior = global.pupspd;
            meio = global.pupdmg;
            menor = global.puptp;
        }

        //todos repetidos
        if(global.puptp == global.pupdmg &amp;&amp; global.puptp == global.pupspd){
            maior = global.puptp;
            meio = global.pupdmg;
            menor = global.pupspd;
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_back);
draw_set_color(c_white);
draw_set_halign(fa_left);
//score
    if instance_exists(obj_player){
        if (global.lg = 0)
        draw_text(450,10,"Score: " + string(global.scrhud ));
            
        else if (global.lg = 1)
        draw_text(450,10,"Pontos: " + string(global.scrhud ));
        
            
    
            
        //Hp
            draw_sprite(spr_hud,1,20,20);
            draw_sprite_ext(spr_hud,0,20,20,obj_player.hphud/global.maxhp,1,0,c_white,1);
            draw_sprite_ext(spr_hud,4,20,20,obj_player.sphud/global.maxsp,1,0,c_white,1);
            
                
            //Overheat
            if (obj_player.hot &gt;= global.maxheat) &amp;&amp; (alarm[0] &lt; 60) {
                draw_sprite(spr_hud,7,20,45);
            }
            else {
                draw_sprite(spr_hud,2,20,45);
                draw_sprite_ext(spr_hud,3,20,45,obj_player.heat/global.maxheat,1,0,c_white,1);
            }
                
            draw_set_valign(0);
        }
            
        //Mboss Hp
        if instance_exists(obj_mboss)&amp;&amp;instance_exists(obj_player) {
            draw_sprite_ext(spr_hud,6,860,20,obj_mboss.hphud/150,1,0,c_white,1);
            draw_sprite_ext(spr_hud,5,860,20,obj_mboss.hp/150,1,0,c_white,1);
        }
        
        //Power Ups
        draw_sprite_ext(spr_hud,8,860,45,global.tphud/900,1,0,c_white,1);
        draw_sprite_ext(spr_hud,9,860,45,global.dmghud/900,1,0,c_white,1);
        draw_sprite_ext(spr_hud,10,860,45,global.spdhud/900,1,0,c_white,1);
        
         if (global.tphud &lt; global.dmghud &amp;&amp; global.tphud &lt; global.spdhud) draw_sprite_ext(spr_hud,8,860,45,global.tphud/900,1,0,c_white,1);
        if (global.tphud &lt; global.dmghud || global.tphud &lt; global.spdhud) draw_sprite_ext(spr_hud,8,860,45,global.tphud/900,1,0,c_white,1);
        //if (global.dmghud &lt; global.tphud || global.dmghud &lt; global.spdhud) draw_sprite_ext(spr_hud,9,860,45,global.dmghud/900,1,0,c_white,1);
        if (global.dmghud &lt; global.tphud &amp;&amp; global.dmghud &lt; global.spdhud) draw_sprite_ext(spr_hud,9,860,45,global.dmghud/900,1,0,c_white,1);
        if (global.dmghud &lt; global.spdhud) draw_sprite_ext(spr_hud,9,860,45,global.dmghud/900,1,0,c_white,1);
        if (global.spdhud &lt; global.dmghud &amp;&amp; global.spdhud &lt; global.tphud) draw_sprite_ext(spr_hud,10,860,45,global.spdhud/900,1,0,c_white,1); 
        
        
        
        if ((global.spdhud == global.tphud &amp;&amp; global.tphud == global.dmghud) || (global.spdhud == global.tphud &amp;&amp; global.tphud != global.dmghud) || (global.spdhud == global.tphud &amp;&amp; global.dmghud == 0) || (global.spdhud == global.dmghud &amp;&amp; global.tphud == 0)) {
            draw_sprite_ext(spr_hud,11,860,45,global.spdhud/900,1,0,c_white,1); 
         }
         
         if ((global.tphud == global.dmghud &amp;&amp; global.spdhud == 0) || (global.tphud == global.dmghud &amp;&amp; global.spdhud != global.dmghud)) {
            draw_sprite_ext(spr_hud,11,860,45,global.dmghud/900,1,0,c_white,1); 
         }
    
        /*  if (maior==global.tphud &amp;&amp; meio==global.dmghud &amp;&amp; menor==global.spdhud) {
            draw_sprite_ext(spr_hud,8,860,45,global.tphud/900,1,0,c_white,1);
            draw_sprite_ext(spr_hud,9,860,45,global.dmghud/900,1,0,c_white,1);
            draw_sprite_ext(spr_hud,10,860,45,global.spdhud/900,1,0,c_white,1);
        }
        
         if (maior==global.tphud &amp;&amp; meio==global.spdhud &amp;&amp; menor==global.dmghud) {
             draw_sprite_ext(spr_hud,8,860,45,global.tphud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,9,860,45,global.spdhud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,10,860,45,global.dmghud/900,1,0,c_white,1);
        }
        
        
        
         if (maior==global.dmghud &amp;&amp; meio==global.tphud &amp;&amp; menor==global.spdhud) {
             draw_sprite_ext(spr_hud,8,860,45,global.dmghud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,9,860,45,global.tphud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,10,860,45,global.spdhud/900,1,0,c_white,1);
        }
        
         if (maior==global.dmghud &amp;&amp; meio==global.spdhud &amp;&amp; menor==global.tphud) {
            draw_sprite_ext(spr_hud,8,860,45,global.dmghud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,9,860,45,global.spdhud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,10,860,45,global.tphud/900,1,0,c_white,1);
        }
        
        
        
         if (maior==global.spdhud &amp;&amp; meio==global.tphud &amp;&amp; menor==global.dmghud) {
            draw_sprite_ext(spr_hud,8,860,45,global.spdhud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,9,860,45,global.tphud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,10,860,45,global.dmghud/900,1,0,c_white,1);
        }
        
         if (maior==global.spdhud &amp;&amp; meio==global.dmghud &amp;&amp; menor==global.tphud) {
            draw_sprite_ext(spr_hud,8,860,45,global.spdhud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,9,860,45,global.dmghud/900,1,0,c_white,1);
             draw_sprite_ext(spr_hud,10,860,45,global.tphud/900,1,0,c_white,1);
        
        }
        
        
        
        
        /*
        N1 N2 N3 x
        N1 N3 N2 x
        
        N2 N1 N3 x
        N2 N3 N1 x
        
        N3 N1 N2 x
        N3 N2 N1 x
        */
        //*/
        //
        
        //Draw Pause
        if(global.pause = 1) || (!instance_exists(obj_player)) { 
            draw_set_color(c_black);
            draw_set_alpha(0.5);
            draw_rectangle(0,0,room_width, room_height,0);
            draw_set_alpha(1);
            draw_set_color(c_white);   
        }
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
